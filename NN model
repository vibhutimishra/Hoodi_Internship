{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyN/K/P5+THeSUEFwxPObthf",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vibhutimishra/Hoodi_Internship/blob/master/NN%20model\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L86LNFdjK4uK"
      },
      "source": [
        "# Code to read csv file into colaboratory:\r\n",
        "!pip install -U -q PyDrive\r\n",
        "from pydrive.auth import GoogleAuth\r\n",
        "from pydrive.drive import GoogleDrive\r\n",
        "from google.colab import auth\r\n",
        "from oauth2client.client import GoogleCredentials"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QrgwDzV_Meo7"
      },
      "source": [
        "auth.authenticate_user()\r\n",
        "gauth = GoogleAuth()\r\n",
        "gauth.credentials = GoogleCredentials.get_application_default()\r\n",
        "drive = GoogleDrive(gauth)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5QaVvzYOtoVL"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zPaTVvhQNDfc"
      },
      "source": [
        "#2.1 Get the file\r\n",
        "downloaded = drive.CreateFile({'id':'1o8mPIoCwyOxPqkNUQUyuW5Hn7ofYnsf4'}) # replace the id with id of file you want to access\r\n",
        "downloaded2 = drive.CreateFile({'id':'1_P9Ynjg5SfFA7jmS1P7YQM80kdAiZyos'})\r\n",
        "downloaded2.GetContentFile('weather_for_years.xlsx') \r\n",
        "downloaded.GetContentFile('PDC_Db_latest.xlsx')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D-P_Y4ZZee_j",
        "outputId": "76888672-a943-4672-f83e-5bec4dc86817"
      },
      "source": [
        "#import files\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.preprocessing import LabelEncoder,OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_absolute_error\n",
        "from pandas import DataFrame\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import accuracy_score\n",
        " \n",
        "print(\"completed\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "completed\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3-uLNPlWPksV",
        "outputId": "4e61c879-8028-47a6-dfcd-2e1f69563af2"
      },
      "source": [
        "#3.1 Read file as panda dataframe\n",
        "import pandas as pd\n",
        "weather = pd.read_excel('weather_for_years.xlsx') \n",
        "print(weather.head())\n",
        "production = pd.read_excel('PDC_Db_latest.xlsx')\n",
        "print(production.head())\n",
        "production=production.drop(\"Plot Id\",axis=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "   Year  Month  Max temp C  ...  wind speed(kmph)  Cloud (%)  Pressure (mb)\n",
            "0  2015      1        29.0  ...              12.7         10         1014.7\n",
            "1  2015      2        32.0  ...              12.9          4         1013.4\n",
            "2  2015      3        34.0  ...              11.5         13         1011.9\n",
            "3  2015      4        37.0  ...              12.0         14         1009.4\n",
            "4  2015      5        38.0  ...              16.7         16         1008.0\n",
            "\n",
            "[5 rows x 10 columns]\n",
            "     Plot Id Variety  Year  ...   Tonns    St Date    To Date\n",
            "0    1002041   86032  2015  ...   0.000 2016-03-05 2016-03-02\n",
            "1    1002132   86032  2015  ...  63.598 2016-12-29 2017-01-08\n",
            "2    1002151   91010  2015  ...  38.501 2016-11-20 2016-11-22\n",
            "3  100218912   86032  2015  ...   0.634 2016-11-21 2016-11-26\n",
            "4  100218923   86032  2015  ...   0.000 2015-08-15 2015-08-15\n",
            "\n",
            "[5 rows x 12 columns]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DAMGvtZ5LPdy",
        "outputId": "8db72225-c870-4268-e072-c9ead33d8a45"
      },
      "source": [
        " \n",
        "plantDate=pd.DataFrame(production[\"Plant Date\"])\n",
        "harvestStart=pd.DataFrame(production[\"St Date\"])\n",
        "harvestEnd=pd.DataFrame(production[\"To Date\"])\n",
        " \n",
        "months=[]\n",
        " \n",
        "#including time series to production data\n",
        "for i in range(1874):\n",
        "   plantDate[\"Plant Date\"][i]=str(plantDate[\"Plant Date\"][i])[0:11]\n",
        "   harvestStart[\"St Date\"][i]=str(harvestStart[\"St Date\"][i])[0:11]\n",
        "   py=str(plantDate[\"Plant Date\"][i])[0:4]\n",
        "   pm=str(plantDate[\"Plant Date\"][i])[5:7]\n",
        "   hy=str(harvestStart[\"St Date\"][i])[0:4]\n",
        "   hm=str(harvestStart[\"St Date\"][i])[5:7]\n",
        "   time=(int(hy)-int(py))*12+(int(hm)-int(pm))\n",
        "   months.append(time)\n",
        "   \n",
        "months=pd.Series(months)\n",
        "production['Time']=months\n",
        "print(production.head())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "  Variety  Year  Plant Area   Balance Area  ...   Tonns    St Date    To Date Time\n",
            "0   86032  2015          2.0           0.0  ...   0.000 2016-03-05 2016-03-02    3\n",
            "1   86032  2015          2.5           0.0  ...  63.598 2016-12-29 2017-01-08   12\n",
            "2   91010  2015          1.5           0.0  ...  38.501 2016-11-20 2016-11-22   12\n",
            "3   86032  2015          0.5           0.0  ...   0.634 2016-11-21 2016-11-26   16\n",
            "4   86032  2015          2.5           0.0  ...   0.000 2015-08-15 2015-08-15    1\n",
            "\n",
            "[5 rows x 12 columns]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_ihUPTgGvtR7"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "twwoF66Sdwnl",
        "outputId": "8e1dfb5d-d1c3-495d-9176-ccad128377f1"
      },
      "source": [
        "#finding the standard deviation\r\n",
        "standardDeviation=pd.DataFrame(columns=['Max temp','Min temp','Rain','Sun hour','humidity','wind speed','cloud','Pressure'])\r\n",
        "for i in range(1874):\r\n",
        "    py=int(str(plantDate[\"Plant Date\"][i])[0:4])\r\n",
        "    pm=int(str(plantDate[\"Plant Date\"][i])[5:7])\r\n",
        "    hy=int(str(harvestStart[\"St Date\"][i])[0:4])\r\n",
        "    hm=int(str(harvestStart[\"St Date\"][i])[5:7])\r\n",
        "\r\n",
        "    start = weather[(weather['Year']==py) & (weather['Month']==pm)].index[0]\r\n",
        "    end =  weather[(weather['Year']==hy) & (weather['Month']==hm)].index[0]\r\n",
        "    if end>start:\r\n",
        "        newdf=pd.DataFrame(weather[start:end+1])\r\n",
        "        x=newdf.std()\r\n",
        "        arr=[]\r\n",
        "        for j in range(2,10):\r\n",
        "            arr.append(x[j].round(5))\r\n",
        "        \r\n",
        "        newx=pd.DataFrame([arr],\r\n",
        "                          columns=['Max temp','Min temp','Rain','Sun hour','humidity','wind speed','cloud','Pressure'])\r\n",
        "        standardDeviation=standardDeviation.append(newx)\r\n",
        "    else:\r\n",
        "        arr=[0,0,0,0,0,0,0,0]\r\n",
        "        newx=pd.DataFrame([arr],\r\n",
        "                          columns=['Max temp','Min temp','Rain','Sun hour','humidity','wind speed','cloud','Pressure'])\r\n",
        "        standardDeviation=standardDeviation.append(newx)\r\n",
        "\r\n",
        "print(\"completed\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "completed\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RVf_kTKmeIbS",
        "outputId": "55741e9c-c67b-4621-ced3-37afb9a270bf"
      },
      "source": [
        "production.reset_index()\r\n",
        "sd=standardDeviation\r\n",
        "sd=sd.reset_index()\r\n",
        "production=pd.concat([production,sd],axis=1)\r\n",
        "\r\n",
        "print(production.head())\r\n",
        "#building model\r\n",
        "production=production.drop([\"Plant Date\"],axis=1)\r\n",
        "production=production.drop([\"Ag Type\"],axis=1)\r\n",
        "production=production.drop([\"St Date\"],axis=1)\r\n",
        "production=production.drop([\"To Date\"],axis=1)\r\n",
        "production=production.drop([\"index\"],axis=1)\r\n",
        "production=production.drop([\"Disposal Name\"],axis=1)\r\n",
        "print(\"completed\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "  Variety  Year  Plant Area   ...  wind speed     cloud Pressure\n",
            "0   86032  2015          2.0  ...     1.04682   3.09570  1.42829\n",
            "1   86032  2015          2.5  ...     4.45309  25.60123  4.05823\n",
            "2   91010  2015          1.5  ...     4.39252  25.20760  3.96177\n",
            "3   86032  2015          0.5  ...     5.38247  23.98161  3.53922\n",
            "4   86032  2015          2.5  ...     4.59619   7.07107  0.63640\n",
            "\n",
            "[5 rows x 21 columns]\n",
            "completed\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KEsqK2JzeVvP",
        "outputId": "55816ae2-3a90-4940-f2e5-0fa2b9fadc94"
      },
      "source": [
        "ph=[]\r\n",
        "Electric_conductivity=[]\r\n",
        "Organic_carbon=[]\r\n",
        "Nitrogen=[]\r\n",
        "Phosphorus=[]\r\n",
        "Potassium=[]\r\n",
        "Sulphur=[]\r\n",
        "Zn=[]\r\n",
        "Fe=[]\r\n",
        "Cu=[]\r\n",
        "Mn=[]\r\n",
        "Boron=[]\r\n",
        "\r\n",
        "for i in range(1874):\r\n",
        "    ph.append(6.5)\r\n",
        "    Electric_conductivity.append(0.85)\r\n",
        "    Organic_carbon.append(15)\r\n",
        "    # 240- 480kg/ha\r\n",
        "    Nitrogen.append(360)\r\n",
        "    # 11 – 22 Kg/ha\r\n",
        "    Phosphorus.append(16.5)\r\n",
        "    # 110-280Kg/ha\r\n",
        "    Potassium.append(195)\r\n",
        "    # 500 lb elemental S/acre\r\n",
        "    Sulphur.append(500)\r\n",
        "    #2 lb Zn/acre\r\n",
        "    Zn.append(2)\r\n",
        "    # 1 % FeSO4\r\n",
        "    Fe.append(1)\r\n",
        "    #2 lb Cu/acre\r\n",
        "    Cu.append(2)\r\n",
        "    # 5 lb Mn/acre\r\n",
        "    Mn.append(5)\r\n",
        "    #  1 lb B/acre\r\n",
        "    Boron.append(1)\r\n",
        "\r\n",
        "production[\"ph\"]=ph;\r\n",
        "production[\"Electric_conductivity(EC)\"]=Electric_conductivity;\r\n",
        "production[\"Organic_carbon(OC)\"]=Organic_carbon;\r\n",
        "production[\" Nitrogen(N)\"]= Nitrogen;\r\n",
        "production[\"Phosphorus(P)\"]=Phosphorus;\r\n",
        "production[\"Potassium(K)\"]=Potassium;\r\n",
        "production[\"Sulphur(S)\"]=Sulphur;\r\n",
        "production[\"Zn\"]=Zn;\r\n",
        "production[\"Boron\"]=Boron;\r\n",
        "\r\n",
        "production[\"yield\"]=production[\"Tonns\"]\r\n",
        "del production['Tonns']\r\n",
        "\r\n",
        "production[\"Fe\"]=Fe;\r\n",
        "production[\"Cu\"]=Cu;\r\n",
        "production[\"Mn\"]=Mn;\r\n",
        "print(production.head(1))\r\n",
        "print(production.shape)\r\n",
        "X=production.iloc[:,1:26].values\r\n",
        "y=production.iloc[:,26:27]\r\n",
        "\r\n",
        "Labelencoder_X=LabelEncoder()\r\n",
        "X[:,3]=Labelencoder_X.fit_transform(X[:,3])\r\n",
        "\r\n",
        "Xtrain,Xtest,ytrain,ytest=train_test_split(X,y,test_size=0.2,random_state=42)\r\n",
        "\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "  Variety  Year  Plant Area   Balance Area Crop Ty  ...  Boron  yield  Fe  Cu  Mn\n",
            "0   86032  2015          2.0           0.0      PL  ...      1    0.0   1   2   5\n",
            "\n",
            "[1 rows x 27 columns]\n",
            "(1874, 27)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YURyHVDJiQHk",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c8370506-70f1-4370-b84e-fd7b2355c1d8"
      },
      "source": [
        "#Neural Network \r\n",
        "!pip install --upgrade tensorflow\r\n",
        "import tensorflow as tf\r\n",
        "from tensorflow.keras.models import Sequential\r\n",
        "from tensorflow.keras.layers import Input,Dense, Dropout\r\n",
        "print(\"completed\")\r\n",
        "\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already up-to-date: tensorflow in /usr/local/lib/python3.6/dist-packages (2.4.1)\n",
            "Requirement already satisfied, skipping upgrade: wrapt~=1.12.1 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (1.12.1)\n",
            "Requirement already satisfied, skipping upgrade: flatbuffers~=1.12.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (1.12)\n",
            "Requirement already satisfied, skipping upgrade: protobuf>=3.9.2 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (3.12.4)\n",
            "Requirement already satisfied, skipping upgrade: gast==0.3.3 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (0.3.3)\n",
            "Requirement already satisfied, skipping upgrade: six~=1.15.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (1.15.0)\n",
            "Requirement already satisfied, skipping upgrade: h5py~=2.10.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (2.10.0)\n",
            "Requirement already satisfied, skipping upgrade: keras-preprocessing~=1.1.2 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (1.1.2)\n",
            "Requirement already satisfied, skipping upgrade: tensorflow-estimator<2.5.0,>=2.4.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (2.4.0)\n",
            "Requirement already satisfied, skipping upgrade: wheel~=0.35 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (0.36.2)\n",
            "Requirement already satisfied, skipping upgrade: tensorboard~=2.4 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (2.4.1)\n",
            "Requirement already satisfied, skipping upgrade: opt-einsum~=3.3.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (3.3.0)\n",
            "Requirement already satisfied, skipping upgrade: astunparse~=1.6.3 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (1.6.3)\n",
            "Requirement already satisfied, skipping upgrade: numpy~=1.19.2 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (1.19.5)\n",
            "Requirement already satisfied, skipping upgrade: termcolor~=1.1.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (1.1.0)\n",
            "Requirement already satisfied, skipping upgrade: google-pasta~=0.2 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (0.2.0)\n",
            "Requirement already satisfied, skipping upgrade: grpcio~=1.32.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (1.32.0)\n",
            "Requirement already satisfied, skipping upgrade: typing-extensions~=3.7.4 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (3.7.4.3)\n",
            "Requirement already satisfied, skipping upgrade: absl-py~=0.10 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (0.10.0)\n",
            "Requirement already satisfied, skipping upgrade: setuptools in /usr/local/lib/python3.6/dist-packages (from protobuf>=3.9.2->tensorflow) (53.0.0)\n",
            "Requirement already satisfied, skipping upgrade: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.6/dist-packages (from tensorboard~=2.4->tensorflow) (1.8.0)\n",
            "Requirement already satisfied, skipping upgrade: werkzeug>=0.11.15 in /usr/local/lib/python3.6/dist-packages (from tensorboard~=2.4->tensorflow) (1.0.1)\n",
            "Requirement already satisfied, skipping upgrade: markdown>=2.6.8 in /usr/local/lib/python3.6/dist-packages (from tensorboard~=2.4->tensorflow) (3.3.3)\n",
            "Requirement already satisfied, skipping upgrade: google-auth<2,>=1.6.3 in /usr/local/lib/python3.6/dist-packages (from tensorboard~=2.4->tensorflow) (1.25.0)\n",
            "Requirement already satisfied, skipping upgrade: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.6/dist-packages (from tensorboard~=2.4->tensorflow) (0.4.2)\n",
            "Requirement already satisfied, skipping upgrade: requests<3,>=2.21.0 in /usr/local/lib/python3.6/dist-packages (from tensorboard~=2.4->tensorflow) (2.23.0)\n",
            "Requirement already satisfied, skipping upgrade: importlib-metadata; python_version < \"3.8\" in /usr/local/lib/python3.6/dist-packages (from markdown>=2.6.8->tensorboard~=2.4->tensorflow) (3.4.0)\n",
            "Requirement already satisfied, skipping upgrade: rsa<5,>=3.1.4; python_version >= \"3.6\" in /usr/local/lib/python3.6/dist-packages (from google-auth<2,>=1.6.3->tensorboard~=2.4->tensorflow) (4.7)\n",
            "Requirement already satisfied, skipping upgrade: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.6/dist-packages (from google-auth<2,>=1.6.3->tensorboard~=2.4->tensorflow) (0.2.8)\n",
            "Requirement already satisfied, skipping upgrade: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.6/dist-packages (from google-auth<2,>=1.6.3->tensorboard~=2.4->tensorflow) (4.2.1)\n",
            "Requirement already satisfied, skipping upgrade: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.6/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard~=2.4->tensorflow) (1.3.0)\n",
            "Requirement already satisfied, skipping upgrade: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests<3,>=2.21.0->tensorboard~=2.4->tensorflow) (2.10)\n",
            "Requirement already satisfied, skipping upgrade: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests<3,>=2.21.0->tensorboard~=2.4->tensorflow) (2020.12.5)\n",
            "Requirement already satisfied, skipping upgrade: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests<3,>=2.21.0->tensorboard~=2.4->tensorflow) (3.0.4)\n",
            "Requirement already satisfied, skipping upgrade: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests<3,>=2.21.0->tensorboard~=2.4->tensorflow) (1.24.3)\n",
            "Requirement already satisfied, skipping upgrade: zipp>=0.5 in /usr/local/lib/python3.6/dist-packages (from importlib-metadata; python_version < \"3.8\"->markdown>=2.6.8->tensorboard~=2.4->tensorflow) (3.4.0)\n",
            "Requirement already satisfied, skipping upgrade: pyasn1>=0.1.3 in /usr/local/lib/python3.6/dist-packages (from rsa<5,>=3.1.4; python_version >= \"3.6\"->google-auth<2,>=1.6.3->tensorboard~=2.4->tensorflow) (0.4.8)\n",
            "Requirement already satisfied, skipping upgrade: oauthlib>=3.0.0 in /usr/local/lib/python3.6/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard~=2.4->tensorflow) (3.1.0)\n",
            "completed\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RPnNqY24L9G9",
        "outputId": "3af55e58-25f6-461f-9f7c-0af37018bcb6"
      },
      "source": [
        "print(X.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(1874, 25)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xAYmb9kstr07"
      },
      "source": [
        "model= Sequential([\r\n",
        "      Dense(units=25, input_shape=(25,),activation='relu'),\r\n",
        "      Dense(units=32,activation='relu'),\r\n",
        "      Dense(units=1,activation='relu')\r\n",
        "])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DAonSWkP4gy_"
      },
      "source": [
        "Xtrain=np.array(Xtrain,dtype=np.float)\r\n",
        "ytrain=np.array(ytrain,dtype=np.float)\r\n",
        "Xtest=np.array(Xtest,dtype=np.float)\r\n",
        "ytest=np.array(ytest,dtype=np.float)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2Q6a3uOlwHjh",
        "outputId": "fb473458-5d9e-4ad8-fdd0-b3074878c18e"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_4\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "dense_13 (Dense)             (None, 25)                650       \n",
            "_________________________________________________________________\n",
            "dense_14 (Dense)             (None, 32)                832       \n",
            "_________________________________________________________________\n",
            "dense_15 (Dense)             (None, 1)                 33        \n",
            "=================================================================\n",
            "Total params: 1,515\n",
            "Trainable params: 1,515\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cy9cA_ncwR8Q"
      },
      "source": [
        "model.compile(optimizer='sgd', loss='mean_squared_logarithmic_error', metrics=['mse'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9WqtEC6Ny38T",
        "outputId": "3f9b7e74-9ef6-4f8e-e740-91c61ae620cb"
      },
      "source": [
        "model.fit(x=Xtrain, y=ytrain,epochs=30,verbose=2)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/30\n",
            "47/47 - 0s - loss: 3.3475 - mse: 910.7023\n",
            "Epoch 2/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 3/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 4/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 5/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 6/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 7/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 8/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 9/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 10/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 11/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 12/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 13/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 14/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 15/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 16/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 17/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 18/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 19/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 20/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 21/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 22/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 23/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 24/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 25/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 26/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 27/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 28/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 29/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n",
            "Epoch 30/30\n",
            "47/47 - 0s - loss: 3.2104 - mse: 25.0000\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7fcdcb36e550>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ASuzpnGy4XII"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}